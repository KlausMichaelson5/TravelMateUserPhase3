@page "/edit-hotel-rating/{HotelRatingId:int}"

@using System.Text.Json
@using TravelMateUI.Models.Ratings
@using TravelMateUI.Services.Ratings
@using TravelMate.Models
@inject IHotelRatingUIService HotelRatingService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <h3>Edit Hotel Rating</h3>

    @if (hotelRating == null)
    {
        <div class="alert alert-info">Loading...</div>
    }
    else
    {
        <div class="card p-4">
            <div class="form-group">
                <label for="rating">Rating:</label>
                <input type="number" id="rating" class="form-control" @bind="hotelRating.Rating" min="1" max="5" />
            </div>

            <div class="form-group mt-3">
                <label for="review">Review:</label>
                <textarea id="review" class="form-control" @bind="hotelRating.Review" rows="4"></textarea>
            </div>

            <div class="mt-3">
                <button class="btn btn-primary" @onclick="UpdateHotelRating">Update</button>
                <button class="btn btn-secondary ml-2" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int HotelRatingId { get; set; }

    private HotelRating hotelRating;
    private int currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var userJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "currentUser");
        var user = JsonSerializer.Deserialize<User>(userJson);
        currentUserId = user.UserId;
        hotelRating = await HotelRatingService.GetHotelRatingByIdAsync(HotelRatingId, currentUserId);
    }

    private async Task UpdateHotelRating()
    {
        await HotelRatingService.UpdateHotelRatingAsync(hotelRating, currentUserId);
        Navigation.NavigateTo("/myratings");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/myratings");
    }
}