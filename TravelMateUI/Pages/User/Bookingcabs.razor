@page "/cabdetails/{CabId:int}/{cabBookingString}"
@using System.Text.Json
@using TravelMate.Models
@using TravelMate.Services
@using TravelMate2.Services
@inject IAdminUIService AdminService
@inject ICabUIService CabService
@inject IUserUIService userService
@inject IJSRuntime JSRuntime
@inject ICabBookingUIService cabBookingUIService
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

<div class="container mt-5">
    @if (cab != null)
    {
        <div class="card shadow-lg mb-5">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <img src="./@cab.CabPhoto" alt="@cab.VehicleName" class="img-fluid rounded shadow" />
                    </div>
                    <div class="col-md-6">
                        <h1 class="text-primary">@cab.VehicleName</h1>
                        <p class="lead text-muted">@cab.VehicleType</p>
                        <hr />
                        <div class="row">
                            <div class="col-md-6">
                                <h4 class="text-secondary">Cab Details</h4>
                                <ul class="list-unstyled">
                                    <li><i class="fas fa-id-card text-info"></i> <strong>Registration:</strong> @cab.RegistrationNumber</li>
                                    <li><i class="fas fa-address-card text-info"></i> <strong>License:</strong> @cab.LicenseNumber</li>
                                    <li><i class="fas fa-users text-info"></i> <strong>Seats:</strong> @cab.NumberOfSeats</li>
                                    <li><i class="fas fa-dollar-sign text-success"></i> <strong>Price/Km:</strong> $@cab.PricePerKm</li>
                                    <li>
                                        <strong>Rating:</strong>
                                        <div class="mb-3">
                                            <span>@((MarkupString)GetStarRating(cab.Rating))</span>
                                            <span class="ml-2">(@cab.Rating.ToString("0.0"))</span>
                                        </div>
                                    </li>
                                    <li>
                                        <strong>Status:</strong>
                                        <span class="badge @(cab.AvailabilityStatus ? "badge-success" : "badge-danger")">
                                            @(cab.AvailabilityStatus ? "Available" : "Not Available")
                                        </span>
                                    </li>
                                </ul>
                            </div>
                            <div class="col-md-6">
                                <h4 class="text-secondary">Driver Information</h4>
                                <img src="./@cab.DriverPhoto" alt="Driver" class="img-fluid rounded-circle mb-3 shadow" style="max-width: 150px;" />
                                <p><strong>Name:</strong> @driverName</p>
                                <p><strong>Experience:</strong> @driverExperience years</p>
                                <p><strong>Languages:</strong> @driverLanguages</p>
                            </div>
                        </div>
                       
                        <div class="mt-4">
                            <button class="btn btn-primary btn-lg" @onclick="ShowBookingModal" >
                                <i class="fas fa-taxi"></i> @(cab.AvailabilityStatus ? "Book Now" : "Not Available")
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card shadow-lg mb-5">
            <div class="card-body">
                <h3 class="text-primary mb-4"><i class="fas fa-clipboard-list"></i> Cab Features</h3>
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <div class="card bg-light">
                            <div class="card-body text-center">
                                <i class="fas fa-wifi fa-3x text-primary mb-3"></i>
                                <h5>Free Wi-Fi</h5>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card bg-light">
                            <div class="card-body text-center">
                                <i class="fas fa-temperature-low fa-3x text-primary mb-3"></i>
                                <h5>Air Conditioning</h5>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card bg-light">
                            <div class="card-body text-center">
                                <i class="fas fa-music fa-3x text-primary mb-3"></i>
                                <h5>Music System</h5>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p class="mt-3">Loading cab details...</p>
        </div>
    }
</div>

@if (showBookingModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Ride Estimate</h5>
                    <button type="button" class="close" @onclick="CloseBookingModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <h4>Ride Estimate</h4>
                        <p><strong>Estimated Distance:</strong> @estimatedDistance km</p>
                        <p><strong>Estimated Duration:</strong> @estimatedDuration hrs</p>
                        <p><strong>Estimated Fare:</strong> $@estimatedFare</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseBookingModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmBooking">Confirm Booking</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int CabId { get; set; }
    [Parameter]
    public string cabBookingString{ get; set; }

    public CabBookingModel cabBooking { get; set; } = new CabBookingModel();

    private Cab cab=new Cab();
    private string driverName;
    private string driverExperience;
    private string driverLanguages;
    private bool showBookingModal = false;
    private double estimatedDistance;
    private double estimatedDuration;
    private decimal estimatedFare;

    protected override async Task OnInitializedAsync()
    {

        await LoadCabDetailsAsync();
        await LoadDriverDetails();
        estimatedDistance = cabBooking.Distance;
    }

    private async Task LoadCabDetailsAsync()
    {
        try
        {
            cab = await CabService.GetCab(CabId);
            cabBooking = JsonSerializer.Deserialize<CabBookingModel>(cabBookingString);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cab details: {ex.Message}");
        }
    }

    private async Task LoadDriverDetails()
    {
        try
        {
            var drivers = await AdminService.GetAllUsers();
            var driver=drivers.FirstOrDefault(u=>u.UserId==cab.DriverId);
            driverName = driver.Name;

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cab details: {ex.Message}");

        }

        driverExperience = "5"; // Replace with actual data from the User model if available
        driverLanguages = "English, Hindi"; // Replace with actual 
    }

    private void ShowBookingModal()
    {
        showBookingModal = true;
        CalculateEstimate(); // Calculate the estimate as soon as the modal is shown
    }

    private void CloseBookingModal()
    {
        showBookingModal = false;
    }

    private void CalculateEstimate()
    {
        estimatedDuration = cabBooking.Distance/40.0; 
        estimatedFare = (decimal)(estimatedDistance * (double)cab.PricePerKm);
    }

    private async Task ConfirmBooking()
    {      
        cabBooking.BookingStatus = "Done";
        cabBooking.TotalAmount = estimatedFare;
        try
        {
            var userJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "currentUser");

            if (!string.IsNullOrEmpty(userJson))
            {
                var user = JsonSerializer.Deserialize<User>(userJson);
                cabBooking.UserId = user.UserId;
                cabBookingUIService.AddCabBooking(cabBooking, user.UserId);
 
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading driver details from local storage: {ex.Message}");
        }
        CloseBookingModal();
        NavigationManager.NavigateTo("/CabBookingConfirmation");
    }

    private string GetStarRating(decimal rating)
    {
        int fullStars = (int)Math.Floor(rating);
        bool hasHalfStar = rating - fullStars >= 0.5m;

        string stars = string.Concat(Enumerable.Repeat("<i class='fas fa-star text-warning'></i>", fullStars));

        if (hasHalfStar)
        {
            stars += "<i class='fas fa-star-half-alt text-warning'></i>";
        }

        int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
        stars += string.Concat(Enumerable.Repeat("<i class='far fa-star text-warning'></i>", emptyStars));

        return stars;
    }
}