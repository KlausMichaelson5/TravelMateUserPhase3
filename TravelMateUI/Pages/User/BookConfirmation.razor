@page "/CabBookingConfirmation/{BookingId:int}"
@using System.Text.Json
@using TravelMate.Models
@using TravelMate2.Services
@using TravelMateUI.Services
@inject ICabBookingUIService cabBookingUIService
@inject IUserUIService userService
@inject IJSRuntime JSRuntime

<html>
<head>
<script>
        function localStorageHelper ={
        setItem: function (key, value) {
            localStorage.setItem(key, value);
        },
        getItem: function (key) {
            return localStorage.getItem(key);
        },
        removeItem: function (key) {
            localStorage.removeItem(key);
        }
    };
</script>
</head>
<body>
<div class="container mt-5">
    @if (booking != null)
    {
        <div class="card shadow-lg mb-5">
            <div class="card-body">
                <h3 class="text-primary mb-4"><i class="fas fa-clipboard-check"></i> Booking Confirmation</h3>
                <p><strong>Booking ID:</strong> @booking.CabBookingId</p>
                <p><strong>Booking Status:</strong> @booking.BookingStatus.ToString()</p>
                <p><strong>Total Amount:</strong> $@booking.TotalAmount</p>
                <p><strong>Estimated Distance:</strong> @booking.Distance km</p>
                <p><strong>Estimated Duration:</strong> @booking.Distance/40 hrs</p>
            </div>
        </div>
    }
    else
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p class="mt-3">Loading booking details...</p>
        </div>
    }
</div>
</body>
</html>
@code {
    [Parameter]
    public int BookingId { get; set; }

    public int userId{ get; set; }

    private CabBookingModel booking;

    protected override async Task OnInitializedAsync()
    {
        var userJson = await JSRuntime.InvokeAsync<string>("localStorageHelper.getItem", "currentUser");
        var user = JsonSerializer.Deserialize<User>(userJson); // Deserialize user from local storage
        Console.WriteLine(user.Username);
        userId = user?.UserId ?? 0; 
        await LoadBookingDetailsAsync();
    }

    private async Task LoadBookingDetailsAsync()
    {
        try
        {
            booking = await cabBookingUIService.GetCabBookingById(BookingId,userId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading booking details: {ex.Message}");
        }
    }
}
