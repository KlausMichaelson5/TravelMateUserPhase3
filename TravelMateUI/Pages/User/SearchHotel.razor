@page "/hotels"
@using Microsoft.AspNetCore.WebUtilities
@using TravelMateUI.Services
@using TravelMate.Models
@using TravelMateUI.Models
@inject NavigationManager NavigationManager
@inject ISearchUIService SearchService
@inject IWishListUIService WishListService
<div class="text-center">
<h2 class="active">Hotels in @city</h2>
</div>

@if (hotels == null)
{
    <p>Loading...</p>
}
else if (hotels.Count == 0)
{
    <p>No hotels found in @city.</p>
}
else
{
    <div class="row">
        @foreach (var hotel in hotels)
        {
            <div class="col-md-4 mb-4">
                <div class="card">
                    <img src="@hotel.HotelImage" class="card-img-top" alt="@hotel.Name">
                    <div class="card-body">
                        <h5 class="card-title">@hotel.Name</h5>
                        <p class="card-text">@hotel.Description</p>
                        <div class="d-flex align-items-center">
                            <i class="fas fa-map-marker-alt mr-2"></i>
                            <span>@hotel.City, @hotel.Country</span>
                        </div>
                        <div class="mt-3">
                            <a class="btn btn-primary" href="/rooms/@hotel.HotelId?checkInDate=@checkInDate&checkOutDate=@checkOutDate">View Rooms</a>
                            <button class="btn btn-secondary mt-2" @onclick="() => AddToWishList(hotel)">Add to Wishlist</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Hotel> hotels;
    private string city;
    private DateTime? checkInDate;
    private DateTime? checkOutDate;
    private int currentUserId = 1; // Assume you get this from the authentication context

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("city", out var cityName))
        {
            city = cityName;
        }

        if (query.TryGetValue("checkInDate", out var checkInDateStr))
        {
            if (DateTime.TryParse(checkInDateStr, out var parsedDate))
            {
                checkInDate = parsedDate;
            }
        }

        if (query.TryGetValue("checkOutDate", out var checkOutDateStr))
        {
            if (DateTime.TryParse(checkOutDateStr, out var parsedDate))
            {
                checkOutDate = parsedDate;
            }
        }

        await LoadHotels();
    }

    private async Task LoadHotels()
    {
        var allHotels = await SearchService.GetAllHotels();
        hotels = allHotels.Where(h => h.City.Equals(city, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private async Task AddToWishList(Hotel hotel)
    {
        var wishListItem = new WishListTable
            {
                HotelId = hotel.HotelId,
                UserId = currentUserId,
                HotelImage=hotel.HotelImage,
                HotelName=hotel.Name
                // CreatedAt = DateOnly.UtcNow;
            };

        await WishListService.AddWishListItem(wishListItem, currentUserId);
        // Optionally, show a success message or update UI
    }
}
