@page "/cabowner"
@using Microsoft.AspNetCore.Authorization
@using TravelMate.Models
@using TravelMate2.Services
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject UserInfoService userInfoService
@inject IJSRuntime JSRuntime
@inject IUserUIService userUIService
@inject ICabUIService cabUIService
@inject ICustomAuthenticationStateProvider authStateProvider
@attribute [Authorize(Roles = "driver_client")]

<!DOCTYPE html>
<html lang="en">

<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" rel="stylesheet" />
    <style>
        .background-image {
            /* Background image styling if required */
        }

        .badge-yes {
            background-color: green;
            color: white;
        }

        .badge-no {
            background-color: red;
            color: white;
        }

        /* Add custom styles for the popup */
        #locationModal .modal-dialog {
            max-width: 600px;
        }

        #map {
            height: 400px;
            width: 100%;
        }
    </style>
    <script>
        function toggleAvailabilityStatus(checkbox) {
            var label = document.getElementById('availabilityLabel');
            if (checkbox.checked) {
                label.style.color = 'green';
                label.innerHTML = 'Availability status: Available';
            } else {
                label.style.color = 'red';
                label.innerHTML = 'Availability status: Not Available';
            }
        }</script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDyjeyU3YV0msuacUOVafevmN6KpsgncgE&callback=initMap"></script>
    
        <script src="./map-functions.js" ></script>
</head>

<body>
    <div class="background-image">
        <!-- Header Section -->
        <!-- Dashboard Section -->
        <div class="dashboard-section container">
            @if (CabOwnerCab != null)
            {
                <!-- Display Cab Details -->
                <div class="card shadow-sm my-4">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">Your Cab Details</h4>
                    </div>
                    <div class="card-body">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">
                                <strong>Vehicle Name:</strong> @CabOwnerCab.VehicleName
                            </li>
                            <li class="list-group-item">
                                <strong>Registration Number:</strong> @CabOwnerCab.RegistrationNumber
                            </li>
                            <li class="list-group-item">
                                <strong>License Number:</strong> @CabOwnerCab.LicenseNumber
                            </li>
                            <li class="list-group-item">
                                <strong>Number of Seats:</strong> @CabOwnerCab.NumberOfSeats
                            </li>
                            <li class="list-group-item">
                                <strong>Price per Km:</strong> @CabOwnerCab.PricePerKm
                            </li>
                            <li class="list-group-item">
                                <strong>Vehicle Type:</strong> @CabOwnerCab.VehicleType
                            </li>
                            <li class="list-group-item">
                                <strong>Rating:</strong>
                                <span class="badge badge-success">@CabOwnerCab.Rating</span>
                            </li>
                        </ul>
                    </div>
                </div>

                <!-- Availability Status and Location Section -->
                <div class="card shadow-sm my-4">
                    <div class="card-header bg-secondary text-white">
                        <h4 class="mb-0">Manage Availability and Location</h4>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <div class="d-flex align-items-center">
                                <label class="form-check-label me-2" id="availabilityLabel" for="flexSwitchCheckChecked">Availability status:</label>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" checked onchange="toggleAvailabilityStatus(this)">
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <strong>Set Your Location:</strong>
                            <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#locationModal">
                                Set Location
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Location Modal -->
                <div class="modal fade" id="locationModal" tabindex="-1" aria-labelledby="locationModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="locationModalLabel">Set Your Location</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="mb-3">
                                    <label for="searchBox" class="form-label">Search for a place</label>
                                    <input id="searchBox" class="form-control" type="text" placeholder="Enter a location" @bind="userLocation" />
                                    <button class="btn btn-primary mt-2" @onclick="searchLocation">Search</button>
                                </div>
                                <div id="map" style="height: 400px;"></div>
                                <div class="d-flex justify-content-between mt-3">
                                    <button type="button" class="btn btn-success" @onclick="GetCurrentLocationAsync">Use Current Location</button>
                                    <button type="button" class="btn btn-success" @onclick="LocationSubmit">Submit</button>
                                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                                </div>
                                
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Current, Upcoming, and Finished Rides Section -->
                <div class="row my-4">
                    <!-- Current Ride -->
                    <div class="col-lg-4 col-md-6 mb-4">
                        <div class="card h-100">
                            <div class="card-header bg-info text-white">
                                <h5 class="mb-0">Current Ride</h5>
                            </div>
                            <div class="card-body">
                                <p>No current ride details available.</p>
                            </div>
                        </div>
                    </div>

                    <!-- Upcoming Ride -->
                    <div class="col-lg-4 col-md-6 mb-4">
                        <div class="card h-100">
                            <div class="card-header bg-warning text-white">
                                <h5 class="mb-0">Upcoming Ride</h5>
                            </div>
                            <div class="card-body">
                                <p>No upcoming ride details available.</p>
                            </div>
                        </div>
                    </div>

                    <!-- Finished Ride -->
                    <div class="col-lg-4 col-md-6 mb-4">
                        <div class="card h-100">
                            <div class="card-header bg-success text-white">
                                <h5 class="mb-0">Finished Ride</h5>
                            </div>
                            <div class="card-body">
                                <p>No finished ride details available.</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- Display "No Cab Found" Message -->
                <div class="alert alert-warning text-center my-4">
                    <h3 class="alert-heading">No Cabs Found</h3>
                    <p>You don't have any cabs registered at the moment. To start adding cabs, click the button below.</p>
                    <a class="btn btn-primary btn-lg mt-3" @onclick="AddCab">Add Cab</a>
                </div>
            }
        </div>

        <!-- Footer Section -->
        <!-- Keep the existing footer section -->
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>

@code {
    private Cab? CabOwnerCab { get; set; } = null;
    private decimal userLatitude = 12.97194000M;    
    private decimal userLongitude = 77.59369000M;
    private bool isRouteSearched = false;
    private string userLocation;
    private string toLocation;

    protected async override Task OnInitializedAsync()
    {
        var cabOwner = userInfoService._currentUser;
        if (cabOwner != null)
        {
            CabOwnerCab = await cabUIService.GetCab(cabOwner.UserId);
        }
    }

    private void AddCab()
    {
        Navigation.NavigateTo("/register-cab");
    }
    public class LocationResult
    {
        public decimal latitude { get; set; }
        public decimal longitude { get; set; }
    }
    private async Task GetCurrentLocationAsync()
    {
        try
        {
            var result = await JSRuntime.InvokeAsync<LocationResult>("getCurrentLocation");
            if (result != null)
            {
                userLatitude = result.latitude;
                userLongitude = result.longitude;
            }
            await InitializeMapAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching location: {ex.Message}");
        }
    }
    private async Task InitializeMapAsync()
    {
        await JSRuntime.InvokeVoidAsync("initializeMap", userLatitude, userLongitude);

    }
    private async Task searchLocation()
    {
        var result= await JSRuntime.InvokeAsync<LocationResult>("showLocation", userLocation);
        CabOwnerCab.Latitude=result.latitude;
        CabOwnerCab.Longitude=result.longitude;
	}
    private async Task LocationSubmit()
    {
        cabUIService.UpdateCab(CabOwnerCab,CabOwnerCab.DriverId);
    }
	
}
