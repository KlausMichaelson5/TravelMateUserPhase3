@page "/bookcab"
@using TravelMate.Models
@using TravelMate2.Services
@using TravelMateUI.Services
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ICabUIService CabService
@inject ISearchUIService SearchUIService

<style>
    .cab-booking-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }

    .hover-shadow:hover {
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        transition: box-shadow 0.3s ease-in-out;
    }

    .modal {
        background-color: rgba(0, 0, 0, 0.5);
    }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<div class="container-fluid cab-booking-container">
    <div class="row">
        <div class="col-md-8">
            <div class="card shadow-lg">
                <div class="card-body">
                    <h1 class="card-title text-primary mb-4"><i class="fas fa-taxi"></i> Book Your Ride</h1>

                    @if (!isRouteSearched)
                    {
                        <div class="search-section p-4 bg-light rounded">
                            <h2 class="mb-3 text-secondary"><i class="fas fa-search"></i> Find Your Perfect Ride</h2>
                            <div class="form-group mb-3">
                                <label for="fromLocation"><i class="fas fa-location-arrow text-primary"></i> Pick-up Location:</label>
                                <input type="text" id="fromLocation" @bind="fromLocation" class="form-control" @oninput="HandleFromLocationChange" placeholder="Enter pick-up location" required />
                            </div>
                            <div class="form-group mb-3">
                                <label for="toLocation"><i class="fas fa-map-marker-alt text-danger"></i> Drop-off Location:</label>
                                <input type="text" id="toLocation" @bind="toLocation" class="form-control" @oninput="HandleToLocationChange" placeholder="Enter drop-off location" required />
                            </div>
                            <div class="form-group mb-3">
                                <label for="vehicleType"><i class="fas fa-car text-warning"></i> Vehicle Type:</label>
                                <select id="vehicleType" @bind="selectedVehicleType" class="form-control">
                                    <option value="">Select Vehicle Type</option>
                                    @foreach (var type in Enum.GetValues(typeof(VehicleType)).Cast<VehicleType>())
                                    {
                                        <option value="@((int)type)">@type</option>
                                    }
                                </select>
                            </div>

                            <button class="btn btn-primary btn-lg btn-block" @onclick="OnSearchClicked">
                                <i class="fas fa-search"></i> Find Cabs
                            </button>
                        </div>
                    }
                    else
                    {
                        <div id="map" class="rounded shadow" style="height: 60vh; width: 100%;"></div>
                    }
                </div>
            </div>
        </div>

        @if (isRouteSearched)
        {
            <div class="col-md-4">
                <div class="card shadow-lg">
                    <div class="card-body">
                        <h2 class="card-title text-success mb-3"><i class="fas fa-car"></i> Available Rides</h2>
                        <div class="cab-list">
                            @foreach (var cab in nearbyCabs)
                            {
                                <div class="cab-item mb-3 p-3 border rounded hover-shadow">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <img src="./@cab.CabPhoto" alt="@cab.VehicleName" class="img-fluid rounded" />
                                        </div>
                                        <div class="col-md-8">
                                            <h4 class="text-primary">@cab.VehicleName</h4>
                                            <p class="text-muted">@cab.VehicleType</p>
                                            <p><i class="fas fa-users text-info"></i> @cab.NumberOfSeats seats | <i class="fas fa-star text-warning"></i> @cab.Rating</p>
                                            <p><i class="fas fa-dollar-sign text-success"></i> $@cab.PricePerKm per km</p>
                                            <button @onclick="() => BookCab(cab)" class="btn btn-success btn-block">
                                                <i class="fas fa-check"></i> Book Now
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script async src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDyjeyU3YV0msuacUOVafevmN6KpsgncgE"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="./cabBooking.js"></script>

@code {
    private List<Cab> nearbyCabs = new();
    private bool isRouteSearched = false;
    private string fromLocation;
    private string toLocation;
    private VehicleType? selectedVehicleType;
    private decimal userLatitude;
    private decimal userLongitude;
    private int currentUserId = 1;

    private void HandleFromLocationChange(ChangeEventArgs e)
    {
        fromLocation = e.Value.ToString();
        JSRuntime.InvokeVoidAsync("initializeAutocomplete", "fromLocation");
    }

    private void HandleToLocationChange(ChangeEventArgs e)
    {
        toLocation = e.Value.ToString();
        JSRuntime.InvokeVoidAsync("initializeAutocomplete", "toLocation");
    }

    private async Task OnSearchClicked()
    {
        isRouteSearched = true;
        await LoadNearbyCabsAsync();
        await InitializeMapAsync();
    }

    private async Task LoadNearbyCabsAsync()
    {
        try
        {
            var cabs = await SearchUIService.GetAllCabs(); // Adjust method if needed
            if (cabs != null)
            {
                nearbyCabs = cabs.ToList();
            }
            //add location based to give from nearby from location of user
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading nearby cabs: {ex.Message}");
        }
    }

    private async Task InitializeMapAsync()
    {
        if (isRouteSearched)
        {
            await JSRuntime.InvokeVoidAsync("initializeMap", userLatitude, userLongitude, nearbyCabs);
            await JSRuntime.InvokeVoidAsync("showRouteByAddress", fromLocation, toLocation);
        }
    }

    private void BookCab(Cab selectedCab)
    {
        NavigationManager.NavigateTo($"/cabdetails/{selectedCab.CabId}");
    }
}