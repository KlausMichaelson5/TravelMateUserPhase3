@page "/register-hotel"
@using Microsoft.AspNetCore.Authorization
@using TravelMate.Models
@using TravelMate2.Services
@inject IHotelUIService HotelService
@inject IJSRuntime JSRuntime
@inject UserInfoService userInfoService
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@attribute [Authorize(Roles = "hotel_owner")]



<!-- Include Bootstrap and Font Awesome -->
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" rel="stylesheet" />
    <style>
        body {
            padding-top: 70px;
            background-color: #f8f9fa;
        }

        .registration-container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

            .registration-container h2 {
                margin-bottom: 20px;
            }

        footer {
            background-color: #343a40;
            color: #ffffff;
            padding: 2rem 0;
        }

            footer a {
                color: #ffc107;
            }

    </style>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDyjeyU3YV0msuacUOVafevmN6KpsgncgE&callback=initMap"></script>
    <script src="./map-functions.js"></script>

</head>

<!-- Header with Navigation Bar -->
<nav class="navbar navbar-expand-lg navbar-light bg-light fixed-top">
    <div class="container">
        <a class="navbar-brand" href="/">
            <i class="fas fa-hotel"></i> Travel Mate - Hotel Registration
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/hotel-owner-home">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="/register-hotel">
                        <i class="fas fa-hotel"></i> Register Hotel
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/hotel-owner-login">
                        <i class="fas fa-sign-in-alt"></i> Hotel Owner Login
                    </a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<!-- Hotel Registration Form -->
<div class="container mt-5">
    <div class="registration-container">
        <h2 class="text-center"><i class="fas fa-hotel"></i> Register Your Hotel</h2>
        <EditForm Model="@hotel" OnValidSubmit="RegisterHotel">
            <DataAnnotationsValidator />
            @*  <ValidationSummary /> *@

            <div class="mb-3">
                <label for="name" class="form-label">Hotel Name</label>
                <InputText id="name" class="form-control" @bind-Value="hotel.Name" placeholder="Enter the hotel name" />
                <ValidationMessage For="@(() => hotel.Name)" />
            </div>

            <div class="mb-3">
                <label for="address" class="form-label">Address</label>
                <InputText id="address" class="form-control" @bind-Value="hotel.Address" placeholder="Enter the address" />
                <ValidationMessage For="@(() => hotel.Address)" />
            </div>

            <div class="mb-3">
                <label for="city" class="form-label">City</label>
                <InputText id="city" class="form-control" @bind-Value="hotel.City" placeholder="Enter the city" />
                <ValidationMessage For="@(() => hotel.City)" />
            </div>

            <div class="mb-3">
                <label for="state" class="form-label">State</label>
                <InputText id="state" class="form-control" @bind-Value="hotel.State" placeholder="Enter the state" />
                <ValidationMessage For="@(() => hotel.State)" />
            </div>

            <div class="mb-3">
                <label for="nationality"><i class="fas fa-globe"></i> Select Nationality:</label>
                <InputSelect id="nationality" class="form-control" @bind-Value="hotel.Country">
                    <option value="">Select Nationality</option>
                    @foreach (var type in Enum.GetValues(typeof(Nationality)))
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => hotel.Country)" />
            </div>

            <div class="mb-3">
                <label for="zipCode" class="form-label">Zip Code</label>
                <InputText id="zipCode" class="form-control" @bind-Value="hotel.ZipCode" placeholder="Enter the zip code" />
                <ValidationMessage For="@(() => hotel.ZipCode)" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputTextArea id="description" class="form-control" @bind-Value="hotel.Description" rows="4" placeholder="Enter a brief description of the hotel" />
                <ValidationMessage For="@(() => hotel.Description)" />
            </div>

            <div class="mb-3">
                <strong>Set Your Location:</strong>
                <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#locationModal">
                    Set Location
                </button>
            </div>


            <div class="mb-3">
                <label for="availabilityStatus" class="form-label">Availability Status</label>
                <InputCheckbox id="availabilityStatus" class="form-check-input" @bind-Value="hotel.AvailabilityStatus" />
                <label class="form-check-label ms-2" for="availabilityStatus">Available</label>
            </div>

            <div class="mb-3">
                <label for="hotelImage" class="form-label">Hotel Image URL</label>
                <InputText id="hotelImage" class="form-control" @bind-Value="hotel.HotelImage" placeholder="Enter the URL of the hotel image" />
                <ValidationMessage For="@(() => hotel.HotelImage)" />
            </div>

            <div class="text-center">
                <button type="submit" class="btn btn-success w-100">
                    <i class="fas fa-save"></i> Register Hotel
                </button>
            </div>
        </EditForm>
        <div class="modal fade" id="locationModal" tabindex="-1" aria-labelledby="locationModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="locationModalLabel">Set Your Location</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="searchBox" class="form-label">Search for a place</label>
                            <input id="searchBox" class="form-control" type="text" placeholder="Enter a location" @bind="hotelLocation" />
                            <button class="btn btn-primary mt-2" @onclick="searchLocation">Search</button>
                        </div>
                        <div id="map" style="height: 400px;"></div>
                        <div class="d-flex justify-content-between mt-3">
                            <button type="button" class="btn btn-success" @onclick="GetCurrentLocationAsync">Use Current Location</button>
                            <button type="button" class="btn btn-success" @onclick="LocationSubmit" data-bs-dismiss="modal">Submit</button>
                            <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                        </div>

                    </div>
                </div>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
    </div>
</div>


<!-- Include Bootstrap JS and Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

@code {
    // [Parameter] public int? Id { get; set; }
    private Hotel hotel = new Hotel();

    private bool isSuccess = false;
    private string? errorMessage;

    private decimal hotelLatitude = 12.97194000M;
    private decimal hotelLongitude = 77.59369000M;
    private string hotelLocation;


    // protected override async Task OnInitializedAsync()
    // {
    //     hotel.HotelOwnerId = userInfoService.CurrentUser.UserId;
    // }

    private async Task RegisterHotel()
    {
        try
        {
            await HotelService.Add(hotel, userInfoService._currentUser.UserId);
            isSuccess = true;
            errorMessage = null;
            Navigation.NavigateTo("/hotel-owner-home");
        }
        catch (Exception ex)
        {
            isSuccess = false;
            errorMessage = ex.Message;
        }
    }
    public class LocationResult
    {
        public decimal latitude { get; set; }
        public decimal longitude { get; set; }
    }
    private async Task GetCurrentLocationAsync()
    {
        try
        {
            var result = await JSRuntime.InvokeAsync<LocationResult>("getCurrentLocation");
            if (result != null)
            {
                hotelLatitude = result.latitude;
                hotelLongitude = result.longitude;
            }
            await InitializeMapAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching location: {ex.Message}");
        }
    }
    private async Task InitializeMapAsync()
    {
        await JSRuntime.InvokeVoidAsync("initializeMap", hotelLatitude, hotelLongitude);

    }
    private async Task searchLocation()
    {
        var result = await JSRuntime.InvokeAsync<LocationResult>("showLocation", hotelLocation);
        hotel.Latitude = result.latitude;
        hotel.Longitude = result.longitude;
    }
    private async Task LocationSubmit()
    {
        
    }
}