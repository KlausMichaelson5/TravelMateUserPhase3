@page "/register-hotel"
@using Microsoft.AspNetCore.Authorization
@using TravelMate.Models
@using TravelMate2.Services
@layout MinimalLayout
@inject IHotelUIService HotelService
@inject UserInfoService userInfoService
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@attribute [Authorize(Roles = "hotel_owner")]

<!-- Hotel Registration Form -->
<div class="container mt-5">
    <div class="registration-container">
        <h2 class="text-center"><i class="fas fa-hotel"></i> Register Your Hotel</h2>
        <EditForm Model="@hotel" OnValidSubmit="RegisterHotel">
            <DataAnnotationsValidator />
            @*  <ValidationSummary /> *@

            <div class="mb-3">
                <label for="name" class="form-label">Hotel Name</label>
                <InputText id="name" class="form-control" @bind-Value="hotel.Name" placeholder="Enter the hotel name" />
                <ValidationMessage For="@(() => hotel.Name)" />
            </div>

            <div class="mb-3">
                <label for="address" class="form-label">Address</label>
                <InputText id="address" class="form-control" @bind-Value="hotel.Address" placeholder="Enter the address" />
                <ValidationMessage For="@(() => hotel.Address)" />
            </div>

            <div class="mb-3">
                <label for="city" class="form-label">City</label>
                <InputText id="city" class="form-control" @bind-Value="hotel.City" placeholder="Enter the city" />
                <ValidationMessage For="@(() => hotel.City)" />
            </div>

            <div class="mb-3">
                <label for="state" class="form-label">State</label>
                <InputText id="state" class="form-control" @bind-Value="hotel.State" placeholder="Enter the state" />
                <ValidationMessage For="@(() => hotel.State)" />
            </div>

            <div class="mb-3">
                <label for="nationality"><i class="fas fa-globe"></i> Select Nationality:</label>
                <InputSelect id="nationality" class="form-control" @bind-Value="hotel.Country">
                    <option value="">Select Nationality</option>
                    @foreach (var type in Enum.GetValues(typeof(Nationality)))
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => hotel.Country)" />
            </div>

            <div class="mb-3">
                <label for="zipCode" class="form-label">Zip Code</label>
                <InputText id="zipCode" class="form-control" @bind-Value="hotel.ZipCode" placeholder="Enter the zip code" />
                <ValidationMessage For="@(() => hotel.ZipCode)" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputTextArea id="description" class="form-control" @bind-Value="hotel.Description" rows="4" placeholder="Enter a brief description of the hotel" />
                <ValidationMessage For="@(() => hotel.Description)" />
            </div>

            <div class="mb-3">
                <label for="latitude" class="form-label">Latitude</label>
                <InputNumber id="latitude" class="form-control" @bind-Value="hotel.Latitude" placeholder="Enter the latitude" />
            </div>

            <div class="mb-3">
                <label for="longitude" class="form-label">Longitude</label>
                <InputNumber id="longitude" class="form-control" @bind-Value="hotel.Longitude" placeholder="Enter the longitude" />
            </div>

            <div class="mb-3">
                <label for="rating" class="form-label">Rating</label>
                <InputNumber id="rating" class="form-control" @bind-Value="hotel.Rating" placeholder="Enter the rating" />
                <ValidationMessage For="@(() => hotel.Rating)" />
            </div>

            <div class="mb-3">
                <label for="availabilityStatus" class="form-label">Availability Status</label>
                <InputCheckbox id="availabilityStatus" class="form-check-input" @bind-Value="hotel.AvailabilityStatus" />
                <label class="form-check-label ms-2" for="availabilityStatus">Available</label>
            </div>

            <div class="mb-3">
                <label for="hotelImage" class="form-label">Hotel Image URL</label>
                <InputText id="hotelImage" class="form-control" @bind-Value="hotel.HotelImage" placeholder="Enter the URL of the hotel image" />
                <ValidationMessage For="@(() => hotel.HotelImage)" />
            </div>

            <div class="text-center">
                <button type="submit" class="btn btn-success w-100">
                    <i class="fas fa-save"></i> Register Hotel
                </button>
            </div>
        </EditForm>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
    </div>
</div>

@code {
    private Hotel hotel = new Hotel();

    private bool isSuccess = false;
    private string? errorMessage;

    private async Task RegisterHotel()
    {
        try
        {
            await HotelService.Add(hotel, userInfoService._currentUser.UserId);
            isSuccess = true;
            errorMessage = null;
            Navigation.NavigateTo("/hotel-owner-home");
        }
        catch (Exception ex)
        {
            isSuccess = false;
            errorMessage = ex.Message;
        }
    }
}
